name: Test Kubernetes / Helm Install

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  install-helm-charts:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start minikube
        uses: medyagh/setup-minikube@latest

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Create Namespace and Secrets
        run: |
          set -eo pipefail
          kubectl create namespace tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic coinmarketcap \
            --from-literal=apiKey=FAKE_API_KEY \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic tiingo \
            --from-literal=apiKey=FAKE_API_KEY \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          # Create admin secret for InfluxDB
          kubectl create secret generic influxdb-admin-secret \
            --from-literal=admin-username="admin" \
            --from-literal=admin-password="$(openssl rand -base64 12)" \
            --from-literal=admin-token="$(openssl rand -hex 32)" \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic influxdb-candle-ingestor-credentials \
            --from-literal=INFLUXDB_TOKEN="$(openssl rand -hex 32)" \
            --from-literal=INFLUXDB_ORG="tradestream-org" \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -

      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          bazelrc: |
            build --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true

      - name: Build and Load Images
        run: |
          set -eo pipefail

          # Build and push pipeline image
          bazel run //src/main/java/com/verlumen/tradestream/pipeline:push_image \
            -- \
            --repository localhost:5000/tradestream-data-pipeline \
            --tag "latest"
            
          # Build and push candle ingestor image
          bazel run //services/candle_ingestor:push_candle_ingestor_image \
            -- \
            --repository localhost:5000/candle-ingestor \
            --tag "latest"

          # Build and push top-crypto-updater image
          bazel run //services/top_crypto_updater:push_top_crypto_updater_image \
            -- \
            --repository localhost:5000/top-crypto-updater \
            --tag "latest"

          # Load images into minikube
          docker pull localhost:5000/tradestream-data-pipeline:latest
          docker tag localhost:5000/tradestream-data-pipeline:latest tradestream-data-pipeline:latest
          minikube image load tradestream-data-pipeline:latest
          
          docker pull localhost:5000/candle-ingestor:latest
          docker tag localhost:5000/candle-ingestor:latest candle-ingestor:latest
          minikube image load candle-ingestor:latest
          docker pull localhost:5000/top-crypto-updater:latest
          docker tag localhost:5000/top-crypto-updater:latest top-crypto-updater:latest
          minikube image load top-crypto-updater:latest

      - name: Install Cert Manager
        run: |
          set -eo pipefail
          kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml
          kubectl wait --for=condition=Available -n cert-manager deployment/cert-manager-webhook --timeout=120s

      - name: Install TradeStream Helm Chart
        run: |
          set -eo pipefail
          helm dependency update charts/tradestream

          helm install my-tradestream charts/tradestream \
            --namespace tradestream-namespace \
            --set pipeline.image.repository=tradestream-data-pipeline \
            --set pipeline.image.tag=latest \
            --set candleIngestor.image.repository=candle-ingestor \
            --set candleIngestor.image.tag=latest \
            --set topCryptoUpdaterCronjob.image.repository=top-crypto-updater \
            --set topCryptoUpdaterCronjob.image.tag=latest \
            --set pipeline.runMode=dry \
            --set redis.enabled=true \
            --set topCryptoUpdaterCronjob.enabled=true

      - name: Monitor Deployment
        run: |
          kubectl wait --for=condition=Ready -n tradestream-namespace pod --all --timeout=300s
          # Verify CronJob was created successfully (CronJobs don't have Ready/Established conditions)
          echo "Checking if CronJob exists..."
          kubectl get cronjob my-tradestream-top-crypto-updater -n tradestream-namespace
          # Check CronJob status and configuration
          echo "CronJob details:"
          kubectl describe cronjob my-tradestream-top-crypto-updater -n tradestream-namespace
          # Verify CronJob is not suspended
          if kubectl get cronjob my-tradestream-top-crypto-updater -n tradestream-namespace -o jsonpath='{.spec.suspend}' | grep -q true; then
            echo "ERROR: CronJob is suspended"
            exit 1
          else
            echo "CronJob is active and ready to run on schedule"
          fi

      - name: Diagnostics
        if: always()
        run: |
          echo "=== FINAL DIAGNOSTIC SNAPSHOT ==="
          kubectl get all -n tradestream-namespace -o wide
          kubectl get cronjobs -n tradestream-namespace -o yaml
          kubectl get events -n tradestream-namespace --sort-by=.metadata.creationTimestamp
          helm status my-tradestream -n tradestream-namespace
