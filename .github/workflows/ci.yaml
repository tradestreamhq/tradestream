name: Test Kubernetes / Helm Install

on:
  pull_request:
    branches:
      - main

jobs:
  build-images:
    name: Build & Export Images
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        include:
          - name: candle-ingestor
            target: "//services/candle_ingestor:push_candle_ingestor_image"
            repo: candle-ingestor
          - name: top-crypto-updater
            target: "//services/top_crypto_updater:push_top_crypto_updater_image"
            repo: top-crypto-updater
          - name: strategy-discovery-request-factory
            target: "//services/strategy_discovery_request_factory:push_strategy_discovery_request_factory_image"
            repo: strategy-discovery-request-factory
          - name: strategy-discovery-pipeline
            target: "//src/main/java/com/verlumen/tradestream/discovery:push_image"
            repo: strategy-discovery-pipeline
          - name: strategy-consumer
            target: "//services/strategy_consumer:push_strategy_consumer_image"
            repo: strategy-consumer
          - name: strategy-monitor-api
            target: "//services/strategy_monitor_api:push_strategy_monitor_api_image"
            repo: strategy-monitor-api
          - name: strategy-monitor-ui
            target: "//ui/strategy-monitor:push_strategy_monitor_ui_image"
            repo: strategy-monitor-ui

    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.14.0
        with:
          bazelisk-cache: true
          bazelrc: |
            build --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Build & Push ${{ matrix.name }}
        run: |
          set -eo pipefail
          bazel run ${{ matrix.target }} \
            -- \
            --repository localhost:5000/${{ matrix.repo }} \
            --tag latest

      - name: Retag & Save ${{ matrix.repo }} to tar
        run: |
          set -eo pipefail
          mkdir -p images
          # pull from local registry, retag to short name, then save
          docker pull localhost:5000/${{ matrix.repo }}:latest
          docker tag localhost:5000/${{ matrix.repo }}:latest ${{ matrix.repo }}:latest
          docker save ${{ matrix.repo }}:latest -o images/${{ matrix.repo }}.tar

      - name: Upload images artifact
        uses: actions/upload-artifact@v4
        with:
          name: images
          path: images/*.tar

  deploy:
    name: Start Cluster & Deploy
    needs: build-images
    runs-on: ubuntu-latest

    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start minikube
        uses: medyagh/setup-minikube@latest

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Download images artifact
        uses: actions/download-artifact@v4
        with:
          name: images
          path: images

      - name: Load images into minikube
        run: |
          set -eo pipefail
          for tar in images/*.tar; do
            repo=$(basename "$tar" .tar)
            docker load -i "$tar"
            # now minikube will see candle‑ingestor:latest, top‑crypto‑updater:latest, etc.
            minikube image load "${repo}:latest"
          done

      - name: Create Namespace and Secrets
        run: |
          set -eo pipefail
          kubectl create namespace tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic coinmarketcap \
            --from-literal=apiKey=FAKE_API_KEY \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic tiingo \
            --from-literal=apiKey=FAKE_API_KEY \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic influxdb-admin-secret \
            --from-literal=admin-username="admin" \
            --from-literal=admin-password="$(openssl rand -base64 12)" \
            --from-literal=admin-token="$(openssl rand -hex 32)" \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic influxdb-candle-ingestor-credentials \
            --from-literal=INFLUXDB_TOKEN="$(openssl rand -hex 32)" \
            --from-literal=INFLUXDB_ORG="tradestream-org" \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Cert Manager
        run: |
          set -eo pipefail
          kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml
          kubectl wait --for=condition=Available -n cert-manager deployment/cert-manager-webhook --timeout=120s

      - name: Install TradeStream Helm Chart
        run: |
          set -eo pipefail
          helm dependency update charts/tradestream

          helm install my-tradestream charts/tradestream \
            --namespace tradestream-namespace \
            --set candleIngestor.image.repository=candle-ingestor \
            --set candleIngestor.image.tag=latest \
            --set topCryptoUpdaterCronjob.image.repository=top-crypto-updater \
            --set topCryptoUpdaterCronjob.image.tag=latest \
            --set strategyDiscoveryRequestFactory.image.repository=strategy-discovery-request-factory \
            --set strategyDiscoveryRequestFactory.image.tag=latest \
            --set strategyDiscoveryPipeline.image.repository=strategy-discovery-pipeline \
            --set strategyDiscoveryPipeline.image.tag=latest \
            --set strategyConsumer.image.repository=strategy-consumer \
            --set strategyConsumer.image.tag=latest \
            --set strategyMonitorApi.image.repository=strategy-monitor-api \
            --set strategyMonitorApi.image.tag=latest \
            --set strategyMonitorUi.image.repository=strategy-monitor-ui \
            --set strategyMonitorUi.image.tag=latest \
            --set redis.enabled=true \
            --set postgresql.enabled=true \
            --set topCryptoUpdaterCronjob.enabled=true \
            --set strategyDiscoveryRequestFactory.enabled=true \
            --set strategyConsumer.enabled=true \
            --set strategyMonitorApi.enabled=true \
            --set strategyMonitorUi.enabled=true \
            --set influxdb.enabled=true

      - name: Monitor Deployment
        run: |
          set -eo pipefail
          kubectl wait --for=condition=Ready -n tradestream-namespace pod --all --timeout=300s

          echo "Checking if CronJob exists..."
          kubectl get cronjob my-tradestream-top-crypto-updater -n tradestream-namespace
          kubectl get cronjob my-tradestream-strategy-discovery-request-factory -n tradestream-namespace
          kubectl get cronjob my-tradestream-strategy-consumer -n tradestream-namespace

          for cj in \
            my-tradestream-top-crypto-updater \
            my-tradestream-strategy-discovery-request-factory \
            my-tradestream-strategy-consumer; do

            if kubectl get cronjob $cj -n tradestream-namespace -o jsonpath='{.spec.suspend}' | grep -q true; then
              echo "ERROR: CronJob $cj is suspended"
              exit 1
            else
              echo "CronJob $cj is active"
            fi
          done

      - name: Diagnostics
        if: always()
        run: |
          echo "=== FINAL DIAGNOSTIC SNAPSHOT ==="
          kubectl get all -n tradestream-namespace -o wide
          kubectl get cronjobs -n tradestream-namespace -o yaml
          kubectl get events -n tradestream-namespace --sort-by=.metadata.creationTimestamp
          helm status my-tradestream -n tradestream-namespace
