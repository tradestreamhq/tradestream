name: Test Kubernetes / Helm Install

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  install-helm-charts:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start minikube
        uses: medyagh/setup-minikube@latest

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Create Namespace and Secrets
        run: |
          set -eo pipefail
          kubectl create namespace tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic coinmarketcap \
            --from-literal=apiKey=FAKE_API_KEY \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -

      - uses: bazel-contrib/setup-bazel@0.9.1
        with:
          bazelisk-cache: true
          bazelrc: |
            build --bes_results_url=https://app.buildbuddy.io/invocation/
            build --bes_backend=grpcs://remote.buildbuddy.io
            build --remote_cache=grpcs://remote.buildbuddy.io
            build --noremote_upload_local_results # Uploads logs & artifacts without writing to cache
            build --remote_timeout=10m
            build --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}

      - name: Build and Load Images
        run: |
          set -eo pipefail

          # Build and push pipeline image
          bazel run //src/main/java/com/verlumen/tradestream/pipeline:push_image \
            --verbose_failures \
            --nolegacy_important_outputs \
            --experimental_remote_cache_compression \
            --experimental_remote_cache_compression_threshold=100 \
            -- \
            --repository localhost:5000/tradestream-data-pipeline \
            --tag "latest"

          # Load images into minikube
          docker pull localhost:5000/tradestream-data-pipeline:latest
          docker tag localhost:5000/tradestream-data-pipeline:latest tradestream-data-pipeline:latest
          minikube image load tradestream-data-pipeline:latest

      - name: Install Cert Manager
        run: |
          set -eo pipefail
          kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml
          kubectl wait --for=condition=Available -n cert-manager deployment/cert-manager-webhook --timeout=120s

      - name: Install TradeStream Helm Chart
        run: |
          set -eo pipefail
          helm dependency update charts/tradestream

          # Fixed pipeline image repository to use correct image
          helm install my-tradestream charts/tradestream \
            --namespace tradestream-namespace \
            --set pipeline.image.repository=tradestream-data-pipeline \
            --set pipeline.image.tag=latest \
            --set pipeline.runMode=dry

      - name: Monitor Deployment
        run: |
          kubectl wait --for=condition=Ready -n tradestream-namespace pod --all --timeout=300s

      - name: Diagnostics
        if: always()
        run: |
          echo "=== FINAL DIAGNOSTIC SNAPSHOT ==="
          kubectl get all -n tradestream-namespace -o wide
          kubectl get events -n tradestream-namespace --sort-by=.metadata.creationTimestamp
          helm status my-tradestream -n tradestream-namespace
