name: Test Kubernetes / Helm Install

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  validate-helm-chart:
    name: Validate Helm Chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Build Helm Dependencies
        run: |
          set -eo pipefail
          echo "Building Helm chart dependencies..."
          cd charts/tradestream
          helm dependency build
          cd ../..

      - name: Lint and Template Helm Chart
        run: |
          set -eo pipefail
          echo "Linting Helm chart..."
          helm lint charts/tradestream

          echo "Rendering Helm templates..."
          helm template my-tradestream charts/tradestream \
            --namespace tradestream-namespace \
            --set candleIngestor.image.repository=candle-ingestor \
            --set candleIngestor.image.tag=latest \
            --set topCryptoUpdaterCronjob.image.repository=top-crypto-updater \
            --set topCryptoUpdaterCronjob.image.tag=latest \
            --set strategyDiscoveryRequestFactory.image.repository=strategy-discovery-request-factory \
            --set strategyDiscoveryRequestFactory.image.tag=latest \
            --set strategyDiscoveryPipeline.image.repository=strategy-discovery-pipeline \
            --set strategyDiscoveryPipeline.image.tag=latest \
            --set strategyConsumer.image.repository=strategy-consumer \
            --set strategyConsumer.image.tag=latest \
            --set strategyMonitorApi.image.repository=strategy-monitor-api \
            --set strategyMonitorApi.image.tag=latest \
            --set strategyMonitorUi.image.repository=strategy-monitor-ui \
            --set strategyMonitorUi.image.tag=latest \
            --set redis.enabled=true \
            --set postgresql.enabled=true \
            --set topCryptoUpdaterCronjob.enabled=true \
            --set strategyDiscoveryRequestFactory.enabled=true \
            --set strategyConsumer.enabled=true \
            --set strategyMonitorApi.enabled=true \
            --set strategyMonitorUi.enabled=true \
            --set influxdb.enabled=true

  install-helm-charts:
    name: Test Kubernetes / Helm Install
    needs: validate-helm-chart
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start minikube
        uses: medyagh/setup-minikube@latest

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Create Namespace and Secrets
        run: |
          set -eo pipefail
          kubectl create namespace tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic coinmarketcap \
            --from-literal=apiKey=FAKE_API_KEY \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic tiingo \
            --from-literal=apiKey=FAKE_API_KEY \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic influxdb-admin-secret \
            --from-literal=admin-username="admin" \
            --from-literal=admin-password="$(openssl rand -base64 12)" \
            --from-literal=admin-token="$(openssl rand -hex 32)" \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic influxdb-candle-ingestor-credentials \
            --from-literal=INFLUXDB_TOKEN="$(openssl rand -hex 32)" \
            --from-literal=INFLUXDB_ORG="tradestream-org" \
            --namespace=tradestream-namespace --dry-run=client -o yaml | kubectl apply -f -

      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          bazelisk-cache: true
          bazelrc: |
            build --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Build and Load Images
        run: |
          set -eo pipefail

          bazel run //services/candle_ingestor:push_candle_ingestor_image \
            -- --repository localhost:5000/candle-ingestor --tag "latest"

          bazel run //services/top_crypto_updater:push_top_crypto_updater_image \
            -- --repository localhost:5000/top-crypto-updater --tag "latest"

          bazel run //services/strategy_discovery_request_factory:push_strategy_discovery_request_factory_image \
            -- --repository localhost:5000/strategy-discovery-request-factory --tag "latest"

          bazel run //src/main/java/com/verlumen/tradestream/discovery:push_image \
            -- --repository localhost:5000/strategy-discovery-pipeline --tag "latest"

          bazel run //services/strategy_consumer:push_strategy_consumer_image \
            -- --repository localhost:5000/strategy-consumer --tag "latest"

          bazel run //services/strategy_monitor_api:push_strategy_monitor_api_image \
            -- --repository localhost:5000/strategy-monitor-api --tag "latest"

          bazel run //ui/strategy-monitor:push_strategy_monitor_ui_image \
            -- --repository localhost:5000/strategy-monitor-ui --tag "latest"

          docker pull localhost:5000/candle-ingestor:latest
          docker tag localhost:5000/candle-ingestor:latest candle-ingestor:latest
          minikube image load candle-ingestor:latest

          docker pull localhost:5000/top-crypto-updater:latest
          docker tag localhost:5000/top-crypto-updater:latest top-crypto-updater:latest
          minikube image load top-crypto-updater:latest

          docker pull localhost:5000/strategy-discovery-request-factory:latest
          docker tag localhost:5000/strategy-discovery-request-factory:latest strategy-discovery-request-factory:latest
          minikube image load strategy-discovery-request-factory:latest

          docker pull localhost:5000/strategy-discovery-pipeline:latest
          docker tag localhost:5000/strategy-discovery-pipeline:latest strategy-discovery-pipeline:latest
          minikube image load strategy-discovery-pipeline:latest

          docker pull localhost:5000/strategy-consumer:latest
          docker tag localhost:5000/strategy-consumer:latest strategy-consumer:latest
          minikube image load strategy-consumer:latest

          docker pull localhost:5000/strategy-monitor-api:latest
          docker tag localhost:5000/strategy-monitor-api:latest strategy-monitor-api:latest
          minikube image load strategy-monitor-api:latest

          docker pull localhost:5000/strategy-monitor-ui:latest
          docker tag localhost:5000/strategy-monitor-ui:latest strategy-monitor-ui:latest
          minikube image load strategy-monitor-ui:latest

      - name: Install Cert Manager
        run: |
          set -eo pipefail
          kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml
          kubectl wait --for=condition=Available -n cert-manager deployment/cert-manager-webhook --timeout=120s

      - name: Install TradeStream Helm Chart
        run: |
          set -eo pipefail
          helm dependency update charts/tradestream

          helm install my-tradestream charts/tradestream \
            --namespace tradestream-namespace \
            --set candleIngestor.image.repository=candle-ingestor \
            --set candleIngestor.image.tag=latest \
            --set topCryptoUpdaterCronjob.image.repository=top-crypto-updater \
            --set topCryptoUpdaterCronjob.image.tag=latest \
            --set strategyDiscoveryRequestFactory.image.repository=strategy-discovery-request-factory \
            --set strategyDiscoveryRequestFactory.image.tag=latest \
            --set strategyDiscoveryPipeline.image.repository=strategy-discovery-pipeline \
            --set strategyDiscoveryPipeline.image.tag=latest \
            --set strategyConsumer.image.repository=strategy-consumer \
            --set strategyConsumer.image.tag=latest \
            --set strategyMonitorApi.image.repository=strategy-monitor-api \
            --set strategyMonitorApi.image.tag=latest \
            --set strategyMonitorUi.image.repository=strategy-monitor-ui \
            --set strategyMonitorUi.image.tag=latest \
            --set redis.enabled=true \
            --set postgresql.enabled=true \
            --set topCryptoUpdaterCronjob.enabled=true \
            --set strategyDiscoveryRequestFactory.enabled=true \
            --set strategyConsumer.enabled=true \
            --set strategyMonitorApi.enabled=true \
            --set strategyMonitorUi.enabled=true \
            --set influxdb.enabled=true

      - name: Monitor Deployment
        run: |
          kubectl wait --for=condition=Ready -n tradestream-namespace pod --all --timeout=300s
          echo "Checking if CronJob exists..."
          kubectl get cronjob my-tradestream-top-crypto-updater -n tradestream-namespace
          kubectl get cronjob my-tradestream-strategy-discovery-request-factory -n tradestream-namespace
          kubectl get cronjob my-tradestream-strategy-consumer -n tradestream-namespace

          echo "CronJob details:"
          kubectl describe cronjob my-tradestream-top-crypto-updater -n tradestream-namespace
          kubectl describe cronjob my-tradestream-strategy-discovery-request-factory -n tradestream-namespace
          kubectl describe cronjob my-tradestream-strategy-consumer -n tradestream-namespace

          if kubectl get cronjob my-tradestream-top-crypto-updater -n tradestream-namespace -o jsonpath='{.spec.suspend}' | grep -q true; then
            echo "ERROR: CronJob my-tradestream-top-crypto-updater is suspended"
            exit 1
          fi
          if kubectl get cronjob my-tradestream-strategy-discovery-request-factory -n tradestream-namespace -o jsonpath='{.spec.suspend}' | grep -q true; then
            echo "ERROR: CronJob my-tradestream-strategy-discovery-request-factory is suspended"
            exit 1
          fi
          if kubectl get cronjob my-tradestream-strategy-consumer -n tradestream-namespace -o jsonpath='{.spec.suspend}' | grep -q true; then
            echo "ERROR: CronJob my-tradestream-strategy-consumer is suspended"
            exit 1
          fi

      - name: Diagnostics
        if: always()
        run: |
          echo "=== FINAL DIAGNOSTIC SNAPSHOT ==="
          kubectl get all -n tradestream-namespace -o wide
          kubectl get cronjobs -n tradestream-namespace -o yaml
          kubectl get events -n tradestream-namespace --sort-by=.metadata.creationTimestamp
          helm status my-tradestream -n tradestream-namespace
