influxdb:
  enabled: true
  # Authentication configuration
  adminUser:
    # Organization and bucket settings
    organization: "tradestream-org"
    bucket: "tradestream-data"
    retention_policy: "365d"
    # User credentials
    user: "admin"
    # Use existing secret (this will ignore password and token values)
    existingSecret: "influxdb-admin-secret"
    # Remove these when using existingSecret:
    # password: ""
    # token: ""
  # Storage configuration
  persistence:
    enabled: true
    size: 20Gi
kafka:
  replicaCount: 3
  persistence:
    enabled: true
    size: 10Gi
    accessModes:
      - ReadWriteOnce
  listeners:
    client:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
  configurationOverrides:
    "controller.quorum.voters": "0@kafka-0.kafka-headless:9093,1@kafka-1.kafka-headless:9093,2@kafka-2.kafka-headless:9093"
  podSecurityContext:
    runAsUser: 1001
    fsGroup: 1001
  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "2"
      memory: "4Gi"
kafkaUi:
  replicaCount: 1
  image:
    repository: provectuslabs/kafka-ui
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
pipeline:
  enabled: true
  runMode: wet
  image:
    repository: tradestreamhq/tradestream-data-pipeline
    tag: v2.12.0-develop
    pullPolicy: IfNotPresent
  version: v1_18
  configuration:
    env.java.opts.jobmanager: "-Dio.jenetics.util.defaultRandomGenerator=Random"
    env.java.opts.taskmanager: "-Dio.jenetics.util.defaultRandomGenerator=Random"
    taskmanager.numberOfTaskSlots: "1"
    execution.checkpointing.interval: "300000"
    execution.checkpointing.mode: "EXACTLY_ONCE"
    execution.checkpointing.timeout: "1800000"
    execution.checkpointing.externalized-checkpoint-retention: "RETAIN_ON_CANCELLATION"
    state.backend: "rocksdb"
    state.backend.incremental: "true"
  serviceAccount: flink
  jobManager:
    memory: 4096m
    cpu: 2
  taskManager:
    memory: 4096m
    cpu: 2
  job:
    entryClass: com.verlumen.tradestream.pipeline.App
    jarURI: local:///src/main/java/com/verlumen/tradestream/pipeline/app_deploy.jar
    parallelism: 1
    upgradeMode: stateless
candleIngestor:
  enabled: true
  schedule: "*/1 * * * *" # Run every 1 minute
  runMode: "wet" # Default run mode for the job
  job:
    backoffLimit: 2
    ttlSecondsAfterFinished: 3600 # Cleans up finished jobs after 1 hour
    restartPolicy: "OnFailure"
  image:
    repository: "tradestreamhq/candle-ingestor"
    pullPolicy: IfNotPresent
    tag: "v2.12.0-develop"
  config:
    # CCXT Exchange Configuration
    exchanges:
      - "coinbase" # High volume, U.S. based
      - "kraken" # High volume, U.S. friendly
      - "binanceus" # U.S. specific, good U.S. volume
      - "bitstamp" # Good volume, U.S. accessible
      - "cryptocom" # Decent volume, U.S. regulated
      - "gemini" # Decent volume, U.S. regulated
    minExchangesRequired: 2
    # minExchangesRequired: 0 # 0 = auto-detect
    candleGranularityMinutes: 1
    backfillStartDate: "1_year_ago" # Configurable backfill start
    catchUpInitialDays: 7 # Configurable initial catch-up
    apiCallDelaySeconds: 2 # Delay between API calls to respect rate limits
    # Storage Configuration
    influxDbBucket: "tradestream-data"
    redisKeyCryptoSymbols: "top_cryptocurrencies"
    # Debug/Testing Configuration (optional)
    # dryRunLimit: 5  # Uncomment to limit symbols processed in dry run mode
  secrets:
    # InfluxDB credentials
    influxDb:
      name: "influxdb-admin-secret"
      tokenKey: "admin-token"
  redis:
    host: '{{ include "tradestream.fullname" . }}-redis-master'
    port: 6379
  resources:
    requests:
      cpu: "200m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  concurrencyPolicy: "Forbid" # Prevents multiple jobs from running concurrently
  failedJobsHistoryLimit: 2
  successfulJobsHistoryLimit: 3
# Redis configuration
redis:
  enabled: true # Set to true to deploy Redis
  architecture: standalone # Use standalone for simplicity, can be changed to replication or sentinel
  auth:
    enabled: false # Disable password for simplicity, enable in production
    # persistence:
    #   enabled: true
    #   size: 8Gi
# Top Crypto Updater CronJob configuration
topCryptoUpdaterCronjob:
  enabled: true
  schedule: "*/15 * * * *" # Run every 15 minutes
  image:
    repository: "tradestreamhq/top-crypto-updater"
    pullPolicy: IfNotPresent
    tag: "v2.12.0-develop"
  concurrencyPolicy: "Forbid" # Prevents multiple jobs from running concurrently
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  config:
    topNCryptos: 20 # Number of top cryptos to fetch
    redisKey: "top_cryptocurrencies"
  # Secrets for CMC API key and Redis connection details will be mounted if needed
  # For now, assuming Redis is accessible via service name within the same namespace
  # and CMC API key is passed as an environment variable from a secret
  secrets:
    cmcApiKey:
      name: "coinmarketcap" # Assuming this secret exists and has the apiKey
      key: "apiKey"
  redis:
    host: '{{ include "tradestream.fullname" . }}-redis-master' # Dynamically set Redis host
    port: 6379
# Strategy Discovery Request Factory CronJob configuration
strategyDiscoveryRequestFactory:
  enabled: true
  schedule: "* * * * *" # Run at the start of every hour
  image:
    repository: "tradestreamhq/strategy-discovery-request-factory"
    pullPolicy: IfNotPresent
    tag: "v2.12.0-develop"
  concurrencyPolicy: "Forbid" # Prevents multiple jobs from running concurrently
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  config:
    influxDbBucketTracker: "tradestream-data" # Bucket for tracker state
    kafkaTopic: "strategy-discovery-requests"
    trackerServiceName: "strategy_discovery_processor" # Name for this service's own state
    globalStatusTrackerServiceName: "global_candle_status" # Name of the service that reports latest candle data
    minProcessingAdvanceMinutes: 5 # Min minutes new data must be ahead to trigger
    fibonacciWindowsMinutes: # Fibonacci sequence windows in minutes
      - "1597" # ~1.1 days
      - "2584" # ~1.8 days
      - "4181" # ~2.9 days
      - "6765" # ~4.7 days
      - "10946" # ~7.6 days
      - "17711" # ~12.3 days
      - "28657" # ~19.9 days
      - "46368" # ~32.2 days
      - "75025" # ~52.1 days
      - "121393" # ~84.3 days
    defaultTopN: 5
    defaultPopulationSize: 50
  redis:
    host: '{{ include "tradestream.fullname" . }}-redis-master'
    port: 6379
    keyCryptoSymbols: "top_cryptocurrencies"
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
