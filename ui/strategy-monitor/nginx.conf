worker_processes 1;
pid /tmp/nginx.pid;
error_log /tmp/error.log;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Use /tmp for temporary directories since nginx user can write there
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path /tmp/proxy_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;
    
    access_log /tmp/access.log;
    
    sendfile on;
    keepalive_timeout 65;
    
    server {
        listen 8080;
        server_name localhost;
        
        root /usr/share/nginx/html;
        index index.html;
        
        # Proxy API requests to the backend service
        location /api/ {
            # Use cluster DNS resolver for Kubernetes service resolution
            resolver kube-dns.kube-system.svc.cluster.local valid=30s ipv6=off;
            set $backend "tradestream-dev-strategy-monitor-api.tradestream-dev.svc.cluster.local:8080";
            
            # Try Kubernetes service first, fallback to localhost for development
            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle connection failures gracefully
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # CORS headers for browser requests
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            
            # Return 503 with CORS headers if backend is unavailable
            error_page 502 503 504 = @api_unavailable;
        }
        
        location @api_unavailable {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Content-Type "application/json" always;
            return 503 '{"error": "API service temporarily unavailable", "timestamp": "2025-07-28T02:30:00Z"}';
        }
        
        location / {
            try_files $uri $uri/ =404;
        }
        
        # Add headers for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}
