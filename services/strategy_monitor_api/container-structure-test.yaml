schemaVersion: "2.0.0"

metadataTest:
  workdir: "/services/strategy_monitor_api"
  user: "nobody"

fileExistenceTests:
  - name: "Python executable exists"
    path: "/usr/local/bin/python3"
    shouldExist: true
    permissions: "Lrwxrwxrwx"

  - name: "Strategy Monitor API script exists"
    path: "/services/strategy_monitor_api/strategy_monitor_api"
    shouldExist: true
    permissions: "-rwxr-xr-x"

  - name: "Main application file exists"
    path: "/services/strategy_monitor_api/main.py"
    shouldExist: true
    permissions: "-rwxr-xr-x"

commandTests:
  - name: "Strategy Monitor API Help Test"
    command: "/services/strategy_monitor_api/strategy_monitor_api"
    args: ["--help"]
    exitCode: 1
    expectedOutput:
      - "postgres_host"
      - "postgres_port"
      - "postgres_database"
      - "postgres_username"
      - "postgres_password"
      - "api_port"
      - "api_host"

  - name: "Strategy Monitor API Dry Run Test"
    command: "/services/strategy_monitor_api/strategy_monitor_api"
    args:
      [
        "--postgres_host=localhost",
        "--postgres_port=5432",
        "--postgres_database=test",
        "--postgres_username=test",
        "--postgres_password=test",
        "--api_port=8080",
        "--api_host=0.0.0.0",
      ]
    # Should fail due to database connection, but should start Flask app
    exitCode: 1
    expectedError:
      - "Database connection test failed"

  - name: "Python executable test"
    command: "/usr/local/bin/python3"
    args: ["--version"]
    exitCode: 0
    expectedOutput:
      - "Python 3"

  - name: "File content validation test"
    command: "/usr/local/bin/python3"
    args:
      [
        "-c",
        "import os; main_path = '/services/strategy_monitor_api/main.py'; print('Main file exists:', os.path.exists(main_path)); print('Main file size:', os.path.getsize(main_path) if os.path.exists(main_path) else 'N/A')",
      ]
    exitCode: 0
    expectedOutput:
      - "Main file exists: True"
      - "Main file size:"
