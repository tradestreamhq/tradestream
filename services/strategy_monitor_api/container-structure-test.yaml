schemaVersion: "2.0.0"

metadataTest:
  workdir: "/services/strategy_monitor_api"
  user: "nobody"

fileExistenceTests:
  - name: "Python executable exists"
    path: "/usr/bin/python3"
    shouldExist: true
    permissions: "-rwxr-xr-x"
  
  - name: "Strategy Monitor API script exists"
    path: "/services/strategy_monitor_api/strategy_monitor_api"
    shouldExist: true
    permissions: "-rwxr-xr-x"
  
  - name: "Requirements file exists"
    path: "/services/strategy_monitor_api/requirements.txt"
    shouldExist: true
    permissions: "-rw-r--r--"
  
  - name: "Main application file exists"
    path: "/services/strategy_monitor_api/main.py"
    shouldExist: true
    permissions: "-rw-r--r--"

commandTests:
  - name: "Strategy Monitor API Help Test"
    command: "/services/strategy_monitor_api/strategy_monitor_api"
    args: ["--help"]
    exitCode: 0
    expectedOutput:
      - "usage:"
      - "postgres_host"
      - "postgres_port"
      - "postgres_database"
      - "postgres_username"
      - "postgres_password"
      - "api_port"
      - "api_host"
  
  - name: "Strategy Monitor API Dry Run Test"
    command: "/services/strategy_monitor_api/strategy_monitor_api"
    args:
      [
        "--postgres_host=localhost",
        "--postgres_port=5432",
        "--postgres_database=test",
        "--postgres_username=test",
        "--postgres_password=test",
        "--api_port=8080",
        "--api_host=0.0.0.0"
      ]
    # Should fail due to database connection, but should start Flask app
    exitCode: 1
    expectedError:
      - "PostgreSQL password is required"
      - "Database connection test failed"

  - name: "Python imports test"
    command: "/usr/bin/python3"
    args: ["-c", "import flask; import psycopg2; import absl; print('All imports successful')"]
    exitCode: 0
    expectedOutput:
      - "All imports successful"

  - name: "Strategy Monitor API module import test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import app, FLAGS; print('Module import successful')"]
    exitCode: 0
    expectedOutput:
      - "Module import successful"

  - name: "Flask app initialization test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import app; print(f'Flask app name: {app.name}'); print(f'Flask app config: {type(app.config)}')"]
    exitCode: 0
    expectedOutput:
      - "Flask app name: main"
      - "Flask app config: <class 'flask.config.Config'>"

  - name: "CORS configuration test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import app; print('CORS extensions:', list(app.extensions.keys()) if hasattr(app, 'extensions') else 'No extensions')"]
    exitCode: 0
    expectedOutput:
      - "cors"

  - name: "Route registration test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import app; routes = [str(rule) for rule in app.url_map.iter_rules()]; print('Registered routes:', routes)"]
    exitCode: 0
    expectedOutput:
      - "/api/health"
      - "/api/strategies"
      - "/api/metrics"
      - "/api/symbols"
      - "/api/strategy-types"

  - name: "Parameter decoding functions test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import decode_base64_parameters, decode_hex_parameters; print('Decoding functions available')"]
    exitCode: 0
    expectedOutput:
      - "Decoding functions available"

  - name: "Stablecoin detection test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import is_stablecoin; print('USDT is stablecoin:', is_stablecoin('USDT')); print('BTC/USD is stablecoin:', is_stablecoin('BTC/USD'))"]
    exitCode: 0
    expectedOutput:
      - "USDT is stablecoin: True"
      - "BTC/USD is stablecoin: False"

  - name: "Database connection function test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import get_db_connection; print('Database connection function available')"]
    exitCode: 0
    expectedOutput:
      - "Database connection function available"

  - name: "Strategy fetching functions test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import fetch_all_strategies, fetch_strategy_metrics; print('Strategy fetching functions available')"]
    exitCode: 0
    expectedOutput:
      - "Strategy fetching functions available"

  - name: "API endpoint functions test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import health_check, get_strategies, get_metrics, get_symbols, get_strategy_types; print('API endpoint functions available')"]
    exitCode: 0
    expectedOutput:
      - "API endpoint functions available"

  - name: "Base64 parameter decoding test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import decode_base64_parameters; result = decode_base64_parameters('SGVsbG8='); print('Decode result:', result)"]
    exitCode: 0
    expectedOutput:
      - "decoded"
      - "True"

  - name: "Hex parameter decoding test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import decode_hex_parameters; result = decode_hex_parameters('01001400020032', 'type.googleapis.com/strategies.SmaEmaCrossoverParameters'); print('Decode result:', result)"]
    exitCode: 0
    expectedOutput:
      - "SMA Period"
      - "EMA Period"
      - "SMA_EMA_CROSSOVER"

  - name: "Error handling test"
    command: "/usr/bin/python3"
    args: ["-c", "import sys; sys.path.insert(0, '/services/strategy_monitor_api'); from main import decode_base64_parameters; result = decode_base64_parameters('invalid'); print('Error result:', result)"]
    exitCode: 0
    expectedOutput:
      - "error"
      - "Failed to decode base64 parameters" 